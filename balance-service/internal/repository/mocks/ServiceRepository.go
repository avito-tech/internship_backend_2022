// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain2 "github.com/radovsky1/internship_backend_2022/balance-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ServiceRepository is an autogenerated mock type for the ServiceRepository type
type ServiceRepository struct {
	mock.Mock
}

// CreateBalance provides a mock function with given fields: ctx, balance
func (_m *ServiceRepository) CreateBalance(ctx context.Context, balance *domain2.Balance) error {
	ret := _m.Called(ctx, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain2.Balance) error); ok {
		r0 = rf(ctx, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, transaction
func (_m *ServiceRepository) CreateTransaction(ctx context.Context, transaction *domain2.Transaction) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain2.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransfer provides a mock function with given fields: ctx, transfer
func (_m *ServiceRepository) CreateTransfer(ctx context.Context, transfer *domain2.Transfer) error {
	ret := _m.Called(ctx, transfer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain2.Transfer) error); ok {
		r0 = rf(ctx, transfer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *ServiceRepository) CreateUser(ctx context.Context, user *domain2.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain2.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalanceByUserID provides a mock function with given fields: ctx, userID
func (_m *ServiceRepository) GetBalanceByUserID(ctx context.Context, userID int64) (*domain2.Balance, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain2.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain2.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain2.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain2.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: ctx, transactionID
func (_m *ServiceRepository) GetTransactionByID(ctx context.Context, transactionID int64) (*domain2.Transaction, error) {
	ret := _m.Called(ctx, transactionID)

	var r0 *domain2.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain2.Transaction, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain2.Transaction); ok {
		r0 = rf(ctx, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain2.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsByUserID provides a mock function with given fields: ctx, userID
func (_m *ServiceRepository) GetTransactionsByUserID(ctx context.Context, userID int64) ([]*domain2.Transaction, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*domain2.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain2.Transaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain2.Transaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain2.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransferByID provides a mock function with given fields: ctx, transferID
func (_m *ServiceRepository) GetTransferByID(ctx context.Context, transferID int64) (*domain2.Transfer, error) {
	ret := _m.Called(ctx, transferID)

	var r0 *domain2.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain2.Transfer, error)); ok {
		return rf(ctx, transferID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain2.Transfer); ok {
		r0 = rf(ctx, transferID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain2.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, transferID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransfersByFromUserID provides a mock function with given fields: ctx, fromUserID
func (_m *ServiceRepository) GetTransfersByFromUserID(ctx context.Context, fromUserID int64) ([]*domain2.Transfer, error) {
	ret := _m.Called(ctx, fromUserID)

	var r0 []*domain2.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain2.Transfer, error)); ok {
		return rf(ctx, fromUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain2.Transfer); ok {
		r0 = rf(ctx, fromUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain2.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, fromUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransfersByToUserID provides a mock function with given fields: ctx, toUserID
func (_m *ServiceRepository) GetTransfersByToUserID(ctx context.Context, toUserID int64) ([]*domain2.Transfer, error) {
	ret := _m.Called(ctx, toUserID)

	var r0 []*domain2.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain2.Transfer, error)); ok {
		return rf(ctx, toUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain2.Transfer); ok {
		r0 = rf(ctx, toUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain2.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, toUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserID provides a mock function with given fields: ctx, userID
func (_m *ServiceRepository) GetUserByUserID(ctx context.Context, userID int64) (*domain2.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain2.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain2.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, balanceID, free, reserved
func (_m *ServiceRepository) UpdateBalance(ctx context.Context, balanceID int64, free float64, reserved float64) error {
	ret := _m.Called(ctx, balanceID, free, reserved)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, float64, float64) error); ok {
		r0 = rf(ctx, balanceID, free, reserved)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, transactionID, status
func (_m *ServiceRepository) UpdateTransaction(ctx context.Context, transactionID int64, status domain2.TransactionStatus) error {
	ret := _m.Called(ctx, transactionID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain2.TransactionStatus) error); ok {
		r0 = rf(ctx, transactionID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServiceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceRepository creates a new instance of ServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceRepository(t mockConstructorTestingTNewServiceRepository) *ServiceRepository {
	mock := &ServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
